import React from 'react'

const VirtualDOM = () => {
    return (
        <div className='theme'>
            <div className='theme__title'>Виртуальный DOM (VDOM)</div>
            <div className='theme__text text'>

                <p className='text__item text__item_padding'>DOM расшифровывается как Document Object Model (объектная модель документа) и представляет собой древовидную структуру данных с помощью объектов.</p>
                <p className='text__item text__item_padding'>Главная проблема DOM — он никогда не был рассчитан для создания динамического пользовательского интерфейса (UI).</p>
                <p className='text__item text__item_padding'> Изменения и обновления самого DOM являются достаточно быстрыми. Но после изменения обновленный элемент и все его потомки (дочерние элементы) должны быть повторно отрисованы (отрендерены) для обновления UI приложения. Таким образом, чем больше у нас компонентов UI, тем более дорогими с точки зрения производительности являются обновления DOM.</p>
                <p className='text__item text__item_padding'>Для решения данной проблемы и применяется подход с VDOM</p>

                <p className='text__item text__item_padding'>Виртуальный DOM (VDOM) — это концепция программирования, в которой «виртуальное» представление пользовательского интерфейса хранится в памяти в виде легковестной копии DOM и синхронизируется с «настоящим» DOM при помощи библиотеки, такой как ReactDOM.
                </p>
                <p className='text__item text__item_padding'>
                </p>
                <p className='text__item text__item_padding'>При изменении состояния любого элемента, создается новое VDOM дерево. После этого вычисляется разница между предыдущей и текущей версиями VDOM деревьев. Этот процесс называется «поиском различий» (diffing). Дальше вычисляется оптимальный способ обновления реального DOM с минимальным количеством операций. Вместо прямого обновления каждого элемента в DOM, React оптимизирует этот процесс и применяет только необходимые изменения. (Процесс согласования(Reconciliation)  - это процесс отслеживания изменений в состоянии компоненов и оторажение обновленного состояния с минимальными трудозатратами.) Затем все родительское поддерево VDOM подвергается повторному рендерингу. Наконец, это обновленное дерево с результатами вычислений используются для обновления DOM.</p>
                <p className='text__item text__item_padding'>React реализует эвристический алгоритм для вычислений (Эвристический алгоритм — это алгоритм решения задачи, правильность которого для всех возможных случаев не доказана, но про который известно, что он даёт достаточно хорошее решение в большинстве случаев.), который основывается на двух утверждениях:
                    <ol type='1' className='text__item_list list'>
                        <li className='list_item'>Два элемента с разными типами произведут разные деревья.</li>
                        <li className='list_item'>Разработчик может указать какие дочерние элементы останутся стабильными между рендерами с помощью пропа key.</li>
                    </ol></p>
                <p className='text__item text__item_padding'>На практике эти утверждения верны почти во всех случаях.</p>

            </div>
        </div>

    )
}

export default VirtualDOM;